name: CI/CD workflow

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main

jobs:
  check-tests-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    strategy:
      fail-fast: true # Arrête tous les jobs si l'un d'entre eux échoue
      matrix:
        npm_command:
          [
            "run test:ci",
            "run lint",
            "audit --production --audit-level=critical",
          ]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: ./server/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: exécute les tests
        run: |
          npm ${{ matrix.npm_command }}
      # - name: Verify code
      #   run: npm run lint
      # - name: Verify vulnerabilities
      #   run: npm audit --production --audit-level=critical
      # - name: Run tests
      #   run: npm run test:ci
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      # pour le job deploy verra plus tard

  check-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install node
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: "./client/package-lock.json"
      - name: Install dependencies
        run: npm ci
      - name: Vérifie le code
        run: npm run lint
      - name: Vérifier les vulnérabilités
        run: npm audit --production --audit-level=critical

  build-frontend:
    runs-on: ubuntu-latest
    needs: check-frontend
    defaults:
      run:
        working-directory: ./client
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install node
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: "./client/package-lock.json"
      - name: Install dependencies
        run: npm ci
      - name: Build application frontend
        run: npm run build
      - name: Upload build frontend
        uses: actions/upload-artifact@v4
        with:
          name: build-frontend
          path: ./client/dist

  test-e2e-frontend:
    needs: ["build-frontend", "check-tests-backend"]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
    # on ne donne pas de working-directory car on va utiliser ./client et ./server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install node
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"
      ## on install les dependences sur le serveur et cypress le fera pour nous pour le client
      - name: Install dependencies
        run: |
          cd server
          npm ci
      # On récupère l'artifact et on le met dans client/dist
      - name: Download build frontend
        uses: actions/download-artifact@v4
        with:
          name: build-frontend
          path: ./client/dist
      # on lance le backend
      # on lance le backend avec l'option "et" "&" pour lancer le terminal en background
      - name: Start backend
        run: |
          cd server
          npm start &
      # on utilise l'action cypress pour lancer les tests e2e
      - name: Start e2e tests
        uses: cypress-io/github-action@v6
        # on doit préciser les options
        with:
          working-directory: client
          browser: ${{ matrix.browser }}
          # on lance notre serveur en mode preview (necessite le build préalable)
          # Rappel: preview lance un serveur en utilisant le dossier dist
          start: npm run preview
          # on précise d'attendre que le serveur réponde sur le port 4173
          wait-on: http://localhost:4173
          # on peut préciser une durée de timeout si on arrive pas à se connecter au serveur
          wait-on-timeout: 60
          # on précise la baseUrl: C'est notre serveur
          # On pourrait faire le test après le deploiement sur le vps en précisant une url externe
          config: baseUrl=http://localhost:4173

  deploy:
    needs: ["test-e2e-frontend", "check-tests-backend"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-frontend
          path: ./dist
      - name: Deploy
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${{ secrets.SSH_KEY_VPS }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          scp -r ./server ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/ubuntu/
          scp -r ./dist ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/ubuntu/
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "cd /home/ubuntu/server && source ~/.nvm/nvm.sh && npm ci --omit=dev"
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "cd /home/ubuntu/server && source ~/.nvm/nvm.sh && pm2 startOrRestart ecosystem.config.js --env production && pm2 save"
